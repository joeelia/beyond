(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{166:function(a,t,s){"use strict";s.r(t);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"mailboxes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mailboxes","aria-hidden":"true"}},[a._v("#")]),a._v(" Mailboxes")]),a._v(" "),s("p",[a._v('This package works by listening for incoming emails from one of the supported drivers and then "reacting" to an incoming email. This happens in custom Mailbox classes - you can think of them as custom route handlers for your emails.')]),a._v(" "),s("h2",{attrs:{id:"defining-mailboxes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defining-mailboxes","aria-hidden":"true"}},[a._v("#")]),a._v(" Defining Mailboxes")]),a._v(" "),s("p",[a._v("You can define your mailboxes in one of your Laravel service providers. For example, within the "),s("code",[a._v("boot")]),a._v(" method of your "),s("code",[a._v("AppServiceProvider")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[a._v("use")]),a._v(" "),s("span",{attrs:{class:"token package"}},[a._v("BeyondCode"),s("span",{attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Facades"),s("span",{attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Mailbox")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{attrs:{class:"token class-name"}},[a._v("AppServiceProvider")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{attrs:{class:"token class-name"}},[a._v("ServiceProvider")]),a._v("\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{attrs:{class:"token comment"}},[a._v("/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */")]),a._v("\n    "),s("span",{attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("boot")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("from")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'sender@domain.com'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("InboundEmail "),s("span",{attrs:{class:"token variable"}},[a._v("$email")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{attrs:{class:"token comment"}},[a._v("// Handle the incoming email")]),a._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("A single mailbox takes care of handling one specific kind of email. You can either define a closure as the second argument, or use an invokable class. This method/class will then get executed every time your application receives an incoming email that matches the mailbox pattern and subject.")]),a._v(" "),s("h2",{attrs:{id:"invokable-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invokable-classes","aria-hidden":"true"}},[a._v("#")]),a._v(" Invokable classes")]),a._v(" "),s("p",[a._v("Instead of the closure based approach, you can also pass a class name as the second argument of the mailbox create methods. This class will then be created and executed:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("from")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'sender@domain.com'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" MyMailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{attrs:{class:"token class-name"}},[a._v("MyMailbox")]),a._v("\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("__invoke")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("InboundEmail "),s("span",{attrs:{class:"token variable"}},[a._v("$email")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{attrs:{class:"token comment"}},[a._v("// Handle the incoming email")]),a._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"matching-sender-emails"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#matching-sender-emails","aria-hidden":"true"}},[a._v("#")]),a._v(" Matching sender emails")]),a._v(" "),s("p",[a._v("To create a mailbox that matches a specific sender email address, you may use the "),s("code",[a._v("Mailbox::from")]),a._v(" method.")]),a._v(" "),s("p",[a._v("This mailbox will be called whenever the sender of the email addresses matches.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("from")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'sender@domain.com'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" MyMailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"matching-recipient-emails"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#matching-recipient-emails","aria-hidden":"true"}},[a._v("#")]),a._v(" Matching recipient emails")]),a._v(" "),s("p",[a._v("To create a mailbox that matches a specific recipient email address, you may use the "),s("code",[a._v("Mailbox::to")]),a._v(" method.")]),a._v(" "),s("p",[a._v("This mailbox will be called whenever at least one of the email recipients matches.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("to")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'recipient@domain.com'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" MyMailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"matching-cc-emails"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#matching-cc-emails","aria-hidden":"true"}},[a._v("#")]),a._v(" Matching CC emails")]),a._v(" "),s("p",[a._v("Similar to matching email recipients, you may also want to restrict your mailbox to the incoming emails CC attribute. Use the "),s("code",[a._v("Mailbox::cc")]),a._v(" method for this.")]),a._v(" "),s("p",[a._v("This mailbox will be called whenever at least one of the cc recipients matches.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("cc")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'cc@domain.com'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" MyMailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"matching-the-subject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#matching-the-subject","aria-hidden":"true"}},[a._v("#")]),a._v(" Matching the subject")]),a._v(" "),s("p",[a._v("Instead of checking for the email recipients or sender you can also match against the email subject using the "),s("code",[a._v("Mailbox::subject")]),a._v(" method.")]),a._v(" "),s("p",[a._v("This mailbox will be called whenever the email subject matches.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("subject")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'Feedback Request'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" MyMailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"catch-all"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#catch-all","aria-hidden":"true"}},[a._v("#")]),a._v(" Catch-All")]),a._v(" "),s("p",[a._v("In some cases you might want to create a mailbox that receives all incoming emails, no matter what they contain.")]),a._v(" "),s("p",[a._v("You can use the "),s("code",[a._v("Mailbox::catchAll")]),a._v(" method for this. This method only receives a closure/class name that will be called every time your application receives an email.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("catchAll")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("CatchAllMailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"fallback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fallback","aria-hidden":"true"}},[a._v("#")]),a._v(" Fallback")]),a._v(" "),s("p",[a._v('Similar to the "catch-all" mailbox, you might also want to create a fallback mailbox that will be called when none of your other mailboxes match the incoming email. While the '),s("code",[a._v("catchAll")]),a._v(" mailbox will be called for "),s("strong",[a._v("every")]),a._v(" incoming email, the "),s("code",[a._v("fallback")]),a._v(" mailbox will only be called when no other mailbox matches.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("fallback")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("FallbackMailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token keyword"}},[a._v("class")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"using-parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-parameters","aria-hidden":"true"}},[a._v("#")]),a._v(" Using Parameters")]),a._v(" "),s("p",[a._v("In addition to using fixed strings as your mailbox matching rules, you can also use parameters in curly braces - similar to the Laravel routing.")]),a._v(" "),s("p",[a._v("Just wrap the part of the matching rule that you want to capture as a parameter in curly braces and the parameter value will be passed to your invokable class / callback method.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("from")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'{username}@domain.com'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("InboundEmail "),s("span",{attrs:{class:"token variable"}},[a._v("$email")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{attrs:{class:"token variable"}},[a._v("$username")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"regular-expression-constraints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regular-expression-constraints","aria-hidden":"true"}},[a._v("#")]),a._v(" Regular Expression Constraints")]),a._v(" "),s("p",[a._v("You may constrain the format of your mailbox parameters by defining a regular expression in your mailbox definition:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("Mailbox"),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{attrs:{class:"token function"}},[a._v("from")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'{username}@domain.com'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("InboundEmail "),s("span",{attrs:{class:"token variable"}},[a._v("$email")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{attrs:{class:"token variable"}},[a._v("$username")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token operator"}},[a._v("-")]),s("span",{attrs:{class:"token operator"}},[a._v(">")]),s("span",{attrs:{class:"token function"}},[a._v("where")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'username'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{attrs:{class:"token single-quoted-string string"}},[a._v("'[A-Za-z]+'")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])])}],!1,null,null,null);e.options.__file="mailboxes.md";t.default=e.exports}}]);